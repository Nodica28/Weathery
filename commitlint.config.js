// commitlint.config.js | .commitlintrc.js
/** @type {import('cz-git').UserConfig} */
module.exports = {
  rules: {
    'body-leading-blank': [2, 'always'],
    'body-max-line-length': [2, 'always', 90],
    'footer-leading-blank': [2, 'always'],
    'footer-max-line-length': [2, 'always', 90],
    'header-max-length': [2, 'always', 90],
    'header-trim': [2, 'always'],
    'subject-max-length': [2, 'always', 90],
    'subject-case': [
      2,
      'always',
      ['lower-case', 'camel-case', 'start-case', 'pascal-case'],
    ],
    'subject-empty': [2, 'never'],
    'subject-full-stop': [2, 'never', '.'],
    'scope-case': [2, 'always', ['lower-case']],
    'type-case': [2, 'always', 'lower-case'],
    'type-empty': [2, 'never'],
    'type-enum': [
      2,
      'always',
      [
        'feat',
        'fix',
        'chore',
        'docs',
        'style',
        'refactor',
        'perf',
        'test',
        'build',
        'ci',
        'revert',
        'deprecate',
        'remove',
        'security',
        'init',
      ],
    ],
  },
  prompt: {
    alias: { fd: 'docs: fix typos' },
    messages: {
      type: "Select the type of change that you're committing:",
      scope: 'Denote the SCOPE of this change (optional):',
      customScope: 'Denote the SCOPE of this change:',
      subject: 'Write a SHORT, IMPERATIVE tense description of the change:\n',
      body: 'Provide a LONGER description of the change (optional). Use "|" to break new line:\n',
      breaking:
        'List any BREAKING CHANGES (optional). Use "|" to break new line:\n',
      footerPrefixSelect:
        'Select the ISSUES type of changeList by this change (optional):',
      customFooterPrefix: 'Input ISSUES prefix:',
      footer: 'List any ISSUES by this change. E.g.: #31, #34:\n',
      generatingByAI: 'Generating your AI commit subject...',
      generatedSelectByAI: 'Select suitable subject by AI generated:',
      confirmCommit: 'Are you sure you want to proceed with the commit above?',
    },
    types: [
      { value: 'feat', name: 'feat:       A new feature', emoji: ':sparkles:' },
      { value: 'fix', name: 'fix:        A bug fix', emoji: ':bug:' },
      {
        value: 'chore',
        name: "chore:      Other changes that don't modify src or test files",
        emoji: ':hammer:',
      },
      {
        value: 'docs',
        name: 'docs:       Documentation only changes',
        emoji: ':memo:',
      },
      {
        value: 'style',
        name: 'style:      Changes that do not affect the meaning of the code',
        emoji: ':lipstick:',
      },
      {
        value: 'refactor',
        name: 'refactor:   A code change that neither fixes a bug nor adds a feature',
        emoji: ':recycle:',
      },
      {
        value: 'perf',
        name: 'perf:       A code change that improves performance',
        emoji: ':zap:',
      },
      {
        value: 'test',
        name: 'test:       Adding missing tests or correcting existing tests',
        emoji: ':white_check_mark:',
      },
      {
        value: 'build',
        name: 'build:      Changes that affect the build system or external dependencies',
        emoji: ':package:',
      },
      {
        value: 'ci',
        name: 'ci:         Changes to our CI configuration files and scripts',
        emoji: ':ferris_wheel:',
      },
      {
        value: 'revert',
        name: 'revert:     Reverts a previous commit',
        emoji: ':rewind:',
      },
      {
        value: 'deprecate',
        name: 'deprecate:  Deprecates a feature',
        emoji: ':poop:',
      },
      {
        value: 'remove',
        name: 'remove:     Changes that removes a feature after being deprecated',
        emoji: ':x:',
      },
      {
        value: 'security',
        name: 'security:   Changes that improves or resolves a security issue',
        emoji: ':rotating_light:',
      },
      {
        value: 'init',
        name: 'init:       Initial Commit',
        emoji: ':rotating_light:',
      },
    ],
    useEmoji: false,
    emojiAlign: 'center',
    useAI: false,
    aiNumber: 1,
    themeColorCode: '',
    scopes: [],
    allowCustomScopes: true,
    allowEmptyScopes: true,
    customScopesAlign: 'bottom',
    customScopesAlias: 'custom',
    emptyScopesAlias: 'empty',
    upperCaseSubject: false,
    markBreakingChangeMode: false,
    allowBreakingChanges: ['feat', 'fix'],
    breaklineNumber: 100,
    breaklineChar: '|',
    skipQuestions: [],
    issuePrefixes: [
      { value: 'closed', name: 'closed:   ISSUES has been processed' },
    ],
    customIssuePrefixAlign: 'top',
    emptyIssuePrefixAlias: 'skip',
    customIssuePrefixAlias: 'custom',
    allowCustomIssuePrefix: true,
    allowEmptyIssuePrefix: true,
    confirmColorize: true,
    maxHeaderLength: Infinity,
    maxSubjectLength: Infinity,
    minSubjectLength: 0,
    scopeOverrides: undefined,
    defaultBody: '',
    defaultIssues: '',
    defaultScope: '',
    defaultSubject: '',
  },
}
